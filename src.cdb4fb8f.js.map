{"version":3,"sources":["js/fetchData.js","js/utils.js","js/modal.js","index.js"],"names":["inputFormTitle","document","querySelector","inputFormButton","inputFormGenreChange","galleryOfMovies","genresList","paginationButtons","API_KEY","BASE_URL","MAIN_PAGE_URL","SEARCH_MOVIE_URL","GENRE_MOVIE_LIST_URL","GENRE_TV_LIST_URL","TRENDING_DAY_URL","TRENDING_WEEK_URL","page","fetchFirstLoadMovies","response","fetch","firstLoadMovies","json","fetchInputMovieTitle","movieTitle","responseObject","fetchMovieById","movieId","type","renderMoviesFirstLoad","genreName","getMovieGenresNames","innerHTML","markup","data","map","poster_path","title","name","genre_ids","release_date","first_air_date","vote_average","id","media_type","original_title","original_name","undefined","join","toFixed","insertAdjacentHTML","renderMoviesInputTitle","getAllGenres","responseGenresMovie","responseGenresTV","genresMovieList","genresTVList","allGenresList","Map","genres","genre","values","allGenresListMain","genreResponse","console","log","reduce","allGenres","printAllGenresList","pagination","totalPages","i","pageButton","createElement","appendChild","save","key","value","serializedState","JSON","stringify","localStorage","setItem","error","message","load","getItem","parse","remove","removeItem","addToLibrary","listType","libraryList","tempWatchedList","push","alreadyInList","forEach","movie","alert","modalElement","addEventListener","event","target","matches","closest","classList","add","e","code","getMovieAndDisplayModal","movieDetails","onWatched","onQueue","modalHTML","vote_count","popularity","overview","watchedBtn","queueBtn","disabled","window","preventDefault","array","arrayMovies","results","querySelectorAll","element","dataset","total_pages","totalMovies","total_results","trim"],"mappings":"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","file":"src.cdb4fb8f.js","sourceRoot":"../src","sourcesContent":["const inputFormTitle = document.querySelector('.search-form__input');\nconst inputFormButton = document.querySelector('.search-form__btn');\nconst inputFormGenreChange = document.querySelector('.header__genre-option');\n\nconst galleryOfMovies = document.querySelector('.gallery_movies');\nconst genresList = document.querySelector('.genres');\nconst paginationButtons = document.querySelector('.pagination_buttons');\n\n// SPIS TREŚCI:\n// Scenariusz 1: FIRST LOAD\n// Scenariusz 2: SEARCH MOVIE\n// Scenariusz 3: GENRE SELECT\n// Scenariusz 4: TRENDING DAY / TRENDING WEEK\n\n// Ustalanie gatunku/gatunków filmu\n// Paginacja\n\nconst API_KEY = '?api_key=fd87aef18dfd3a2446d882cb85b7272d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst MAIN_PAGE_URL = '/trending/all/day';\nconst SEARCH_MOVIE_URL = '/search/movie';\nconst GENRE_MOVIE_LIST_URL = '/genre/movie/list';\nconst GENRE_TV_LIST_URL = '/genre/tv/list';\nconst TRENDING_DAY_URL = '/trending/movie/day';\nconst TRENDING_WEEK_URL = '/trending/movie/week';\n\nlet page = 1;\n\n// Scenariusz 1: FIRST LOAD krok 1\n// Pobranie danych do galerii, która wyświetla się po WEJŚCIU na stronę\nconst fetchFirstLoadMovies = async () => {\n    const response = await fetch(\n        `${BASE_URL}${MAIN_PAGE_URL}${API_KEY}&page=${page}`\n    );\n  const firstLoadMovies = await response.json();\n  return firstLoadMovies;\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 1\n// Pobranie danych do galerii, która wyświetla się po WPISANIU FILMU\nconst fetchInputMovieTitle = async movieTitle => {\n  const response = await fetch(\n    `${BASE_URL}${SEARCH_MOVIE_URL}${API_KEY}&query=${movieTitle}&page=${page}&include_adult=false`,\n  );\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Pobranie pojedyńczego filmu/serialu przez Id. Opcje dla type to domyślnie 'movie' (parametr opcjonalny) lub serial 'tv'.\nconst fetchMovieById = async (movieId, type = 'movie') => {\n  const response = await fetch(`${BASE_URL}/${type}/${movieId}${API_KEY}`);\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Scenariusz 1: FIRST LOAD krok 2\n// Tworzenie galerii filmów po WEJŚCIU na stronę (lub przeładowaniu)\nlet renderMoviesFirstLoad = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n        .map(({poster_path, title, name, genre_ids, release_date, first_air_date, vote_average, id, media_type, original_title, original_name}) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"${media_type}\">\n                    <img class=\"movie-card__img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"poster of \"${\n          title === undefined ? name : title\n        }\"\" loading=\"lazy\" />\n                    <h2 class=\"movie-card__title\">${title === undefined ? name : title}</h2>\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">${release_date || first_air_date}</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n\n// Scenariusz 2: SEARCH MOVIE krok 2\n// Tworzenie galerii po WPISANIU FILMU w input\nlet renderMoviesInputTitle = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        original_title,\n        title,\n        genre_ids,\n        release_date,\n        vote_average,\n        name,\n        original_name,\n        id,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"movie\">\n                    <img class=\"movie-card__img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${\n          title === undefined ? name : title\n        }\" loading=\"lazy\" />\n                    <h2 class=\"movie-card__title\">${title === undefined ? name : title}</h2>\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids.map(id => genreName[id]).join(', ')}</span>\n                            <span class=\"movie-card__year\">${release_date || first_air_date}</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `},\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n\n//-----------------------------------------------------------------//\n// ZNALEZIENIE LISTY WSZYSTKICH GATUNKÓW FILMÓW\n// z obu podzbiorów bazy danych: Movie oraz TV\n\nconst getAllGenres = async () => {\n    const responseGenresMovie = await fetch(\n        `${BASE_URL}${GENRE_MOVIE_LIST_URL}${API_KEY}&language=en-US`\n    );\n    const responseGenresTV = await fetch(\n        `${BASE_URL}${GENRE_TV_LIST_URL}${API_KEY}&language=en-US`\n    );\n  \n    const genresMovieList = await responseGenresMovie.json();\n    const genresTVList = await responseGenresTV.json();\n  \n    const allGenresList = [\n        ...new Map(\n            [...genresMovieList.genres, ...genresTVList.genres].map(genre => [\n                genre['id'], genre,\n            ])\n        ).values(),\n    ];\n  allGenresListMain = allGenresList;\n    return allGenresList;\n};\nlet genreResponse;\n\nlet allGenresListMain;\nconsole.log(allGenresListMain);\n\n\n\nconst getMovieGenresNames = async () => {\n    if (!genreResponse) {\n        genreResponse = await getAllGenres();\n    }\n    return genreResponse.reduce((allGenres, genre) => {\n        return {...allGenres, [genre.id]: genre.name,\n        };\n    }, {});\n};\n\n\n\n\n\n\n\nlet printAllGenresList = () => {\n    genresList.innerHTML = '';\n    const markup = allGenresList\n        .map(genre => {\n            return `\n                <div>\n                    <ul>\n                        <li class=\"genres\">${genre}</li>\n                    </ul>\n                </div>\n            `})\n        .join(\"\");\n    return genresList.insertAdjacentHTML('beforeend', markup);\n};\n\n\n\n\n\n\n/*\n\n//-----------------------------------------------------------------//\n\nlet genresList = [];\n\n\n// Funkcja, która pyta o gatunki i zwraca je na liście rozwijanej\n\nfunction fetchIDFilms() {\n  return newFilmsBandle\n    .onFetchId()\n    .then(genres => {\n      genresList = genres;\n      renderGenresList(genres);\n      return genresList;\n    })\n    .then(genresList => localeStorageServices.save('FilmIDs', genresList))\n    .catch(console.log);\n}\n\n\n\n\n// Funkcja zmieniająca identyfikatory gatunków na ich NAZWY\n\nfunction parsGenres(genresId, genresList) {\n  const nameGenres = [];\n  for (let i = 0; i <= genresId.length; i += 1) {\n    genresList.map(({ id, name }) => {\n      if (id === genresId[i]) {\n        nameGenres.push(name);\n      }\n    });\n  }\n  return nameGenres;\n}\n\n\n*/\n\n\n\n\n\n\n\n\n\n//-----------------------------------------------------------------//\n// PAGINACJA\nconst pagination = async (totalPages, title) => {\n  paginationButtons = '';\n  if (totalPages >= 1) {\n    for (let i = 1; i <= totalPages; i++) {\n      let pageButton = document.createElement('button');\n      pageButton.innerHTML = i;\n      paginationButtons.appendChild(pageButton);\n    }\n  }\n};\n\n\n\nexport {\n  inputFormButton,\n  inputFormTitle,\n  inputFormGenreChange,\n  galleryOfMovies,\n  paginationButtons,\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  fetchMovieById,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n  pagination,\n};\n","const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst addToLibrary = (movieId, type, listType = 'watchedList') => {\n  const libraryList = load(listType);\n  if (libraryList == undefined) {\n    let tempWatchedList = [];\n    tempWatchedList.push({\n      movieId,\n      type,\n    });\n    return save(listType, tempWatchedList);\n  }\n\n  let alreadyInList = false;\n  libraryList.forEach(movie => {\n    if (movie.movieId == movieId && movie.type === type) {\n      alreadyInList = true;\n    }\n  });\n\n  if (alreadyInList) return alert('Movie already on the list.');\n\n  libraryList.push({\n    movieId,\n    type,\n  });\n  return save(listType, libraryList);\n};\n\nexport { save, load, remove, addToLibrary };\n","import { fetchMovieById } from './fetchData';\nimport { addToLibrary, load } from './utils';\nconst modalElement = document.querySelector('[data-modal]');\n\ndocument.addEventListener('click', event => {\n  if (event.target.matches('[data-modal-close]') || !event.target.closest('[data-modal]')) {\n    modalElement.classList.add('is-hidden');\n  }\n});\ndocument.addEventListener('keydown', e => {\n  if (e.code === 'Escape') {\n    modalElement.classList.add('is-hidden');\n  }\n});\n\nconst getMovieAndDisplayModal = async (id, type) => {\n  const movieDetails = await fetchMovieById(id, type);\n  let onWatched = false;\n  let onQueue = false;\n  load('watchedList').forEach(movie => {\n    if (movie.movieId == id && movie.type === type) {\n      onWatched = true;\n    }\n  });\n  load('queueList').forEach(movie => {\n    if (movie.movieId == id && movie.type === type) {\n      onQueue = true;\n    }\n  });\n  modalElement.classList.remove('is-hidden');\n\n  let modalHTML = `\n        <ul class=\"modal__pic\">\n            <li class=\"pic\">\n                <picture>\n                    <source\n                        src=\"https://image.tmdb.org/t/p/w300/${movieDetails.poster_path}\"\n                        srcset=\"https://image.tmdb.org/t/p/w300/${movieDetails.poster_path} 2x\"\n                        media=\"(min-width:320px) and (max-width:767px)\"/>\n                    <source\n                        src=\"https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}\"\n                        srcset=\"https://image.tmdb.org/t/p/w500/${movieDetails.poster_path} 2x\"\n                        media=\"(min-width:768px) and (max-width:1023px)\"/>\n                    <source\n                        src=\"https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}\"\n                        srcset=\"https://image.tmdb.org/t/p/w500/${movieDetails.poster_path} 2x\"\n                        media=\"(min-width:1024px)\"/>\n                    <img src=\"https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}\" \n                        alt=\"A FISTFUL OF LEAD\"\n                    />\n                </picture>\n            </li>\n        \n        <ul class=\"modal__description\">\n            <ul class=\"description__list\">\n                <li class=\"description__film\">${\n                  movieDetails.title === undefined ? movieDetails.name : movieDetails.title\n                }</li>\n                <button type=\"button\" class=\"close-btn\" data-modal-close>x\n                    <svg width=\"14\" height=\"14\">\n                        <use href=\"../src/images/svg/symbol-defs.svg#icon-close\"></use>\n                    </svg>\n                </button>\n                    <ul class=\"description__vote\">\n                        <li class=\"vote__text\">Vote / Votes</li>\n                        <li class=\"vote__value\"><span class=\"vote__mark\">${movieDetails.vote_average.toFixed(\n                          1,\n                        )}</span> / <span class=\"votes__mark\">${movieDetails.vote_count}\n                        </span></li>\n                    </ul>\n                    <ul class=\"description__popularity\">\n                        <li class=\"popularity__text\">Popularity</li>\n                        <li class=\"popularity__value\">${movieDetails.popularity.toFixed(1)}</li>\n                    </ul>\n                    <ul class=\"description__title\">\n                        <li class=\"title__text\">Original Title</li>\n                        <li class=\"title__value\">${\n                          movieDetails.original_title === undefined\n                            ? movieDetails.original_name\n                            : movieDetails.original_title\n                        }</li>\n                    </ul>\n                    <ul class=\"description__genre\">\n                        <li class=\"genre__text\">Genre</li>\n                        <li class=\"genre__value\">${[\n                          ...movieDetails.genres.map(genre => genre.name),\n                        ].join(', ')}</li>\n                    </ul>\n                <li class=\"description__header\">ABOUT</li>\n                <li class=\"description__text\">${movieDetails.overview}</li>\n                <ul class=\"description__btn\">\n                    <li><button class=\"watched-btn\">ADD TO WATCHED</button></li>\n                    <li><button class=\"queue-btn\">ADD TO QUEUE</button></li>\n                    <li></li>\n                </ul>\n            </ul>\n        </ul>`;\n  modalElement.innerHTML = modalHTML;\n  let watchedBtn = document.querySelector('.watched-btn');\n  let queueBtn = document.querySelector('.queue-btn');\n\n  if (onWatched) {\n    watchedBtn.disabled = true;\n    watchedBtn.innerHTML = 'On List';\n  }\n  if (onQueue) {\n    queueBtn.disabled = true;\n    queueBtn.innerHTML = 'On List';\n  }\n\n  watchedBtn.addEventListener('click', () => {\n    watchedBtn.disabled = true;\n    addToLibrary(id, type, 'watchedList');\n    watchedBtn.innerHTML = 'Added';\n  });\n  queueBtn.addEventListener('click', () => {\n    queueBtn.disabled = true;\n    addToLibrary(id, type, 'queueList');\n    queueBtn.innerHTML = 'Added';\n  });\n};\n\nexport { getMovieAndDisplayModal };\n","import {\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  inputFormButton,\n  inputFormTitle,\n  pagination,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n} from './js/fetchData';\nimport { getMovieAndDisplayModal } from './js/modal';\nimport './sass/main.scss';\n\nfetchFirstLoadMovies;\nfetchInputMovieTitle;\n\n// Scenariusz 1: FIRST LOAD krok 3\n// Nasłuchiwanie pierwszego załadowania strony lub przeładowania\nwindow.addEventListener('load', async event => {\n  event.preventDefault();\n  try {\n    const array = await fetchFirstLoadMovies();\n    const arrayMovies = [];\n\n    array.results.forEach(async movie => {\n      arrayMovies.push(movie);\n    });\n\n    await renderMoviesFirstLoad(arrayMovies);\n    let liElements = document.querySelectorAll('.movie-card');\n    liElements.forEach(element => {\n      element.addEventListener('click', () => {\n        getMovieAndDisplayModal(element.dataset.id, element.dataset.type);\n      });\n    });\n    console.log(arrayMovies);\n\n    const totalPages = await array.total_pages;\n    const totalMovies = await array.total_results;\n\n    console.log(`Total pages: ${totalPages}`);\n    console.log(`Total results: ${totalMovies}`);\n\n    pagination(totalPages, title);\n\n    // arrayMovies.forEach(async movie => {\n    //   console.log(movie);\n    // });\n  } catch (error) {\n    console.error(error);\n  }\n});\n\n// Scenariusz 2: SEARCH MOVIE krok 3\n// Nasłuchiwanie zdarzenia wpisania filmu w input\ninputFormButton.addEventListener('click', async event => {\n  event.preventDefault();\n\n  const movieTitle = inputFormTitle.value.trim();\n\n  try {\n    const array = await fetchInputMovieTitle(movieTitle);\n    const arrayMovies = [];\n\n    array.results.forEach(async movie => {\n      arrayMovies.push(movie);\n    });\n\n   await renderMoviesInputTitle(arrayMovies);\n    let liElements = document.querySelectorAll('.movie-card');\n    liElements.forEach(element => {\n      element.addEventListener('click', target => {\n        getMovieAndDisplayModal(element.dataset.id, element.dataset.type);\n      });\n    });\n    console.log(arrayMovies);\n\n    const totalPages = await array.total_pages;\n    const totalMovies = await array.total_results;\n\n    console.log(`Total pages: ${totalPages}`);\n    console.log(`Total results: ${totalMovies}`);\n\n    pagination(totalPages, title);\n\n    // arrayMovies.forEach(async movie => {\n    //   console.log(movie);\n    // });\n  } catch (error) {\n    console.error(error);\n  }\n});\n"]}