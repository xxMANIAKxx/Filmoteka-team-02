{"version":3,"sources":["js/fetchData.js","js/utils.js","js/modal.js","js/pagination.js","index.js"],"names":["inputFormTitle","document","querySelector","inputFormButton","inputFormGenreChange","galleryOfMovies","genresList","paginationButtons","noPosterImage","require","API_KEY","BASE_URL","MAIN_PAGE_URL","SEARCH_MOVIE_URL","GENRE_MOVIE_LIST_URL","GENRE_TV_LIST_URL","TRENDING_DAY_URL","TRENDING_WEEK_URL","fetchFirstLoadMovies","response","fetch","page","firstLoadMovies","json","fetchInputMovieTitle","movieTitle","responseObject","fetchMovieById","movieId","type","renderMoviesFirstLoad","genreName","getMovieGenresNames","innerHTML","markup","data","map","poster_path","title","name","genre_ids","release_date","first_air_date","vote_average","id","media_type","original_title","original_name","join","toFixed","insertAdjacentHTML","renderMoviesInputTitle","getAllGenres","responseGenresMovie","responseGenresTV","genresMovieList","genresTVList","allGenresList","Map","genres","genre","values","allGenresListMain","genreResponse","console","log","reduce","allGenres","printAllGenresList","pagination","totalPages","save","key","value","serializedState","JSON","stringify","localStorage","setItem","error","message","load","getItem","undefined","parse","remove","removeItem","addToLibrary","listType","libraryList","tempWatchedList","push","alreadyInList","forEach","movie","alert","modalElement","addEventListener","event","target","matches","closest","classList","add","e","code","addModalListenerFunction","querySelectorAll","element","getMovieAndDisplayModal","dataset","movieDetails","onWatched","onQueue","modalHTML","vote_count","popularity","overview","watchedBtn","queueBtn","disabled","paginationContainer","createPagination","total_pages","query","mainDiv","createElement","first","previous","next","last","threeDots1","threeDots2","ariaDisabled","createLinkInputMovie","createLinkAllMovies","appendChild","generateMainPagesButtons","tempPage","index","pageAnchor","testPage","testLastPage","results","filter","window","preventDefault","array","trim"],"mappings":"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","file":"src.5d75fc38.js","sourceRoot":"../src","sourcesContent":["const inputFormTitle = document.querySelector('.search-form__input');\nconst inputFormButton = document.querySelector('.search-form__btn');\nconst inputFormGenreChange = document.querySelector('.header__genre-option');\n\nconst galleryOfMovies = document.querySelector('.gallery_movies');\nconst genresList = document.querySelector('.genres');\nconst paginationButtons = document.querySelector('.pagination_buttons');\nconst noPosterImage = require('../images/misc/no_picture.jpg');\n\n// SPIS TREŚCI:\n// Scenariusz 1: FIRST LOAD\n// Scenariusz 2: SEARCH MOVIE\n// Scenariusz 3: GENRE SELECT\n// Scenariusz 4: TRENDING DAY / TRENDING WEEK\n\n// Ustalanie gatunku/gatunków filmu\n// Paginacja\n\nconst API_KEY = '?api_key=fd87aef18dfd3a2446d882cb85b7272d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst MAIN_PAGE_URL = '/trending/all/day';\nconst SEARCH_MOVIE_URL = '/search/movie';\nconst GENRE_MOVIE_LIST_URL = '/genre/movie/list';\nconst GENRE_TV_LIST_URL = '/genre/tv/list';\nconst TRENDING_DAY_URL = '/trending/movie/day';\nconst TRENDING_WEEK_URL = '/trending/movie/week';\n\n// Scenariusz 1: FIRST LOAD krok 1\n// Pobranie danych do galerii, która wyświetla się po WEJŚCIU na stronę\nconst fetchFirstLoadMovies = async page => {\n  const response = await fetch(\n    `${BASE_URL}${MAIN_PAGE_URL}${API_KEY}&page=${page}&include_adult=false`,\n  );\n  const firstLoadMovies = await response.json();\n  return firstLoadMovies;\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 1\n// Pobranie danych do galerii, która wyświetla się po WPISANIU FILMU\nconst fetchInputMovieTitle = async (page, movieTitle) => {\n  const response = await fetch(\n    `${BASE_URL}${SEARCH_MOVIE_URL}${API_KEY}&query=${movieTitle}&page=${page}&include_adult=false`,\n  );\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Pobranie pojedyńczego filmu/serialu przez Id. Opcje dla type to domyślnie 'movie' (parametr opcjonalny) lub serial 'tv'.\nconst fetchMovieById = async (movieId, type = 'movie') => {\n  const response = await fetch(`${BASE_URL}/${type}/${movieId}${API_KEY}`);\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Scenariusz 1: FIRST LOAD krok 2\n// Tworzenie galerii filmów po WEJŚCIU na stronę (lub przeładowaniu)\nlet renderMoviesFirstLoad = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n        media_type,\n        original_title,\n        original_name,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"${media_type}\">\n                    <img class=\"movie-card__img\" src=\"${\n                      poster_path != null\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noPosterImage\n                    }\" alt=\"poster of '${title ? title : name}'\"  loading=\"lazy\"/>\n                    <h2 class=\"movie-card__title\">${title ? title : name}</h2>\n\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">${\n                              release_date\n                                ? release_date\n                                : first_air_date\n                                ? first_air_date\n                                : 'no-data'\n                            }</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 2\n// Tworzenie galerii po WPISANIU FILMU w input\nlet renderMoviesInputTitle = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n        media_type,\n        original_title,\n        original_name,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"movie\">\n                    <img class=\"movie-card__img\" src=\"${\n                      poster_path != null\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noPosterImage\n                    }\" alt=\"${title ? title : name}\" loading=\"lazy\" />\n                    <h2 class=\"movie-card__title\">${title ? title : name}</h2>\n\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">${\n                              release_date\n                                ? release_date\n                                : first_air_date\n                                ? first_air_date\n                                : 'no-data'\n                            }</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n//-----------------------------------------------------------------//\n// ZNALEZIENIE LISTY WSZYSTKICH GATUNKÓW FILMÓW\n// z obu podzbiorów bazy danych: Movie oraz TV\n\nconst getAllGenres = async () => {\n  const responseGenresMovie = await fetch(\n    `${BASE_URL}${GENRE_MOVIE_LIST_URL}${API_KEY}&language=en-US`,\n  );\n  const responseGenresTV = await fetch(`${BASE_URL}${GENRE_TV_LIST_URL}${API_KEY}&language=en-US`);\n\n  const genresMovieList = await responseGenresMovie.json();\n  const genresTVList = await responseGenresTV.json();\n\n  const allGenresList = [\n    ...new Map(\n      [...genresMovieList.genres, ...genresTVList.genres].map(genre => [genre['id'], genre]),\n    ).values(),\n  ];\n  allGenresListMain = allGenresList;\n  return allGenresList;\n};\nlet genreResponse;\n\nlet allGenresListMain;\nconsole.log(allGenresListMain);\n\nconst getMovieGenresNames = async () => {\n  if (!genreResponse) {\n    genreResponse = await getAllGenres();\n  }\n  return genreResponse.reduce((allGenres, genre) => {\n    return { ...allGenres, [genre.id]: genre.name };\n  }, {});\n};\n\nlet printAllGenresList = () => {\n  genresList.innerHTML = '';\n  const markup = allGenresList\n    .map(genre => {\n      return `\n                <div>\n                    <ul>\n                        <li class=\"genres\">${genre}</li>\n                    </ul>\n                </div>\n            `;\n    })\n    .join('');\n  return genresList.insertAdjacentHTML('beforeend', markup);\n};\n\n/*\n\n//-----------------------------------------------------------------//\n\nlet genresList = [];\n\n\n// Funkcja, która pyta o gatunki i zwraca je na liście rozwijanej\n\nfunction fetchIDFilms() {\n  return newFilmsBandle\n    .onFetchId()\n    .then(genres => {\n      genresList = genres;\n      renderGenresList(genres);\n      return genresList;\n    })\n    .then(genresList => localeStorageServices.save('FilmIDs', genresList))\n    .catch(console.log);\n}\n\n\n\n\n// Funkcja zmieniająca identyfikatory gatunków na ich NAZWY\n\nfunction parsGenres(genresId, genresList) {\n  const nameGenres = [];\n  for (let i = 0; i <= genresId.length; i += 1) {\n    genresList.map(({ id, name }) => {\n      if (id === genresId[i]) {\n        nameGenres.push(name);\n      }\n    });\n  }\n  return nameGenres;\n}\n\n\n*/\n\n//-----------------------------------------------------------------//\n// PAGINACJA\nconst pagination = async (totalPages, title) => {\n  // paginationButtons = '';\n  // if (totalPages >= 1) {\n  //   for (let i = 1; i <= totalPages; i++) {\n  //     let pageButton = document.createElement('button');\n  //     pageButton.innerHTML = i;\n  //     paginationButtons.appendChild(pageButton);\n  //   }\n  // }\n};\n\nexport {\n  inputFormButton,\n  inputFormTitle,\n  inputFormGenreChange,\n  galleryOfMovies,\n  paginationButtons,\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  fetchMovieById,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n  pagination,\n  noPosterImage,\n};\n","const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst addToLibrary = (movieId, type, listType = 'watchedList') => {\n  const libraryList = load(listType);\n  if (libraryList == undefined) {\n    let tempWatchedList = [];\n    tempWatchedList.push({\n      movieId,\n      type,\n    });\n    return save(listType, tempWatchedList);\n  }\n\n  let alreadyInList = false;\n  libraryList.forEach(movie => {\n    if (movie.movieId == movieId && movie.type === type) {\n      alreadyInList = true;\n    }\n  });\n\n  if (alreadyInList) return alert('Movie already on the list.');\n\n  libraryList.push({\n    movieId,\n    type,\n  });\n  return save(listType, libraryList);\n};\n\nexport { save, load, remove, addToLibrary };\n","import { fetchMovieById, noPosterImage } from './fetchData';\nimport { addToLibrary, load } from './utils';\nconst modalElement = document.querySelector('[data-modal]');\n\ndocument.addEventListener('click', event => {\n  if (event.target.matches('[data-modal-close]') || !event.target.closest('[data-modal]')) {\n    modalElement.classList.add('is-hidden');\n  }\n});\ndocument.addEventListener('keydown', e => {\n  if (e.code === 'Escape') {\n    modalElement.classList.add('is-hidden');\n  }\n});\n\nconst addModalListenerFunction = () => {\n  let liElements = document.querySelectorAll('.movie-card');\n  liElements.forEach(element => {\n    element.addEventListener('click', () => {\n      getMovieAndDisplayModal(element.dataset.id, element.dataset.type);\n    });\n  });\n}\n\nconst getMovieAndDisplayModal = async (id, type) => {\n  const movieDetails = await fetchMovieById(id, type);\n  let onWatched = false;\n  let onQueue = false;\n  load('watchedList')?.forEach(movie => {\n    if (movie.movieId == id && movie.type === type) {\n      onWatched = true;\n    }\n  });\n  load('queueList')?.forEach(movie => {\n    if (movie.movieId == id && movie.type === type) {\n      onQueue = true;\n    }\n  });\n  modalElement.classList.remove('is-hidden');\n\n  let modalHTML = `\n        <ul class=\"modal__pic\">\n            <li class=\"pic\">\n                <picture>\n                    <source\n                        src=\"${movieDetails.poster_path? `https://image.tmdb.org/t/p/w300/${movieDetails.poster_path}`: noPosterImage}\"\n                        srcset=\"${movieDetails.poster_path? `https://image.tmdb.org/t/p/w300/${movieDetails.poster_path}`: noPosterImage} 2x\"\n                        media=\"(min-width:320px) and (max-width:767px)\"/>\n                    <source\n                        src=\"${movieDetails.poster_path? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`: noPosterImage}\"\n                        srcset=\"${movieDetails.poster_path? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`: noPosterImage} 2x\"\n                        media=\"(min-width:768px) and (max-width:1023px)\"/>\n                    <source\n                        src=\"${movieDetails.poster_path? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`: noPosterImage}\"\n                        srcset=\"${movieDetails.poster_path? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`: noPosterImage} 2x\"\n                        media=\"(min-width:1024px)\"/>\n                    <img src=\"${movieDetails.poster_path? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`: noPosterImage}\" \n                        alt=\"A FISTFUL OF LEAD\"\n                    />\n                </picture>\n            </li>\n        \n        <ul class=\"modal__description\">\n            <ul class=\"description__list\">\n                <li class=\"description__film\">${\n                  movieDetails.title === undefined ? movieDetails.name : movieDetails.title\n                }</li>\n                <button type=\"button\" class=\"close-btn\" data-modal-close>x\n                    <svg width=\"14\" height=\"14\">\n                        <use href=\"../src/images/svg/symbol-defs.svg#icon-close\"></use>\n                    </svg>\n                </button>\n                    <ul class=\"description__vote\">\n                        <li class=\"vote__text\">Vote / Votes</li>\n                        <li class=\"vote__value\"><span class=\"vote__mark\">${movieDetails.vote_average.toFixed(\n                          1,\n                        )}</span> / <span class=\"votes__mark\">${movieDetails.vote_count}\n                        </span></li>\n                    </ul>\n                    <ul class=\"description__popularity\">\n                        <li class=\"popularity__text\">Popularity</li>\n                        <li class=\"popularity__value\">${movieDetails.popularity.toFixed(1)}</li>\n                    </ul>\n                    <ul class=\"description__title\">\n                        <li class=\"title__text\">Original Title</li>\n                        <li class=\"title__value\">${\n                          movieDetails.original_title === undefined\n                            ? movieDetails.original_name\n                            : movieDetails.original_title\n                        }</li>\n                    </ul>\n                    <ul class=\"description__genre\">\n                        <li class=\"genre__text\">Genre</li>\n                        <li class=\"genre__value\">${[\n                          ...movieDetails.genres.map(genre => genre.name),\n                        ].join(', ')}</li>\n                    </ul>\n                <li class=\"description__header\">ABOUT</li>\n                <li class=\"description__text\">${movieDetails.overview}</li>\n                <ul class=\"description__btn\">\n                    <li><button class=\"watched-btn\">ADD TO WATCHED</button></li>\n                    <li><button class=\"queue-btn\">ADD TO QUEUE</button></li>\n                    <li></li>\n                </ul>\n            </ul>\n        </ul>`;\n  modalElement.innerHTML = modalHTML;\n  let watchedBtn = document.querySelector('.watched-btn');\n  let queueBtn = document.querySelector('.queue-btn');\n\n  if (onWatched) {\n    watchedBtn.disabled = true;\n    watchedBtn.innerHTML = 'On List';\n  }\n  if (onQueue) {\n    queueBtn.disabled = true;\n    queueBtn.innerHTML = 'On List';\n  }\n\n  watchedBtn.addEventListener('click', () => {\n    watchedBtn.disabled = true;\n    addToLibrary(id, type, 'watchedList');\n    watchedBtn.innerHTML = 'Added';\n  });\n  queueBtn.addEventListener('click', () => {\n    queueBtn.disabled = true;\n    addToLibrary(id, type, 'queueList');\n    queueBtn.innerHTML = 'Added';\n  });\n};\n\nexport { getMovieAndDisplayModal, addModalListenerFunction };\n","import {\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n} from './fetchData';\nimport { addModalListenerFunction } from './modal';\nconst paginationContainer = document.querySelector('.pagination-container');\n\nconst createPagination = ({ page, total_pages }, query = '') => {\n  paginationContainer.innerHTML = '';\n  //Creating main helper elements.\n  const mainDiv = document.createElement('div');\n  const first = document.createElement('a');\n  const previous = document.createElement('a');\n  const next = document.createElement('a');\n  const last = document.createElement('a');\n  const threeDots1 = document.createElement('a');\n  const threeDots2 = document.createElement('a');\n  mainDiv.classList.add('pagination');\n  first.innerHTML = '&laquo;';\n  previous.innerHTML = '&lt;';\n  next.innerHTML = '&gt;';\n  last.innerHTML = '&raquo;';\n  threeDots1.innerHTML = '...';\n  threeDots2.innerHTML = '...';\n  threeDots1.ariaDisabled = true;\n  threeDots2.ariaDisabled = true;\n\n  if (query != '') {\n    first.addEventListener('click', () => {\n      createLinkInputMovie(1, query);\n    });\n    last.addEventListener('click', () => {\n      createLinkInputMovie(total_pages, query);\n    });\n    if (page > 1) {\n      previous.addEventListener('click', () => {\n        createLinkInputMovie(page - 1, query);\n      });\n    } else {\n      previous.ariaDisabled = true;\n      first.ariaDisabled = true;\n    }\n    if (page < total_pages) {\n      next.addEventListener('click', () => {\n        createLinkInputMovie(page + 1, query);\n      });\n    } else {\n      next.ariaDisabled = true;\n      last.ariaDisabled = true;\n    }\n  } else {\n    first.addEventListener('click', () => {\n      createLinkAllMovies(1);\n    });\n    last.addEventListener('click', () => {\n      createLinkAllMovies(total_pages);\n    });\n    if (page > 1) {\n      previous.addEventListener('click', () => {\n        createLinkAllMovies(page - 1);\n      });\n    } else {\n      previous.ariaDisabled = true;\n      first.ariaDisabled = true;\n    }\n    if (page < total_pages) {\n      next.addEventListener('click', () => {\n        createLinkAllMovies(page + 1);\n      });\n    } else {\n      next.ariaDisabled = true;\n      last.ariaDisabled = true;\n    }\n  }\n\n  // Adding the middle pages part.\n  if (total_pages == 1) {\n    return;\n  } else if (total_pages > 1 && total_pages < 6) {\n    mainDiv.appendChild(first);\n    mainDiv.appendChild(previous);\n    generateMainPagesButtons(page, total_pages, query, mainDiv);\n    mainDiv.appendChild(next);\n    mainDiv.appendChild(last);\n  } else {\n    mainDiv.appendChild(first);\n    mainDiv.appendChild(previous);\n    if (page > 3) {\n      mainDiv.appendChild(threeDots1);\n    }\n    generateMainPagesButtons(page, total_pages, query, mainDiv);\n    if (page + 2 < total_pages) {\n      mainDiv.appendChild(threeDots2);\n    }\n    mainDiv.appendChild(next);\n    mainDiv.appendChild(last);\n  }\n  paginationContainer.appendChild(mainDiv);\n};\n\n//Function for creating main anchor tags for pages with listeners\nconst generateMainPagesButtons = (page, total_pages, query, mainDiv) => {\n  let tempPage = page;\n  if (page == 2) tempPage = page - 1;\n  if (page == 3) tempPage = page - 2;\n  if (page == 4) tempPage = page - 3;\n  if (page == 5) tempPage = page - 4;\n  if (total_pages < 6) {\n    for (let index = tempPage; index <= total_pages; index++) {\n      let pageAnchor = document.createElement('a');\n      pageAnchor.innerHTML = index;\n      if (page == index) {\n        pageAnchor.classList.add('active');\n      }\n      if (query != '') {\n        pageAnchor.addEventListener('click', () => {\n          createLinkInputMovie(index, query);\n        });\n      } else {\n        pageAnchor.addEventListener('click', () => {\n          createLinkAllMovies(index);\n        });\n      }\n      mainDiv.appendChild(pageAnchor);\n    }\n  } else {\n    let testPage = page - 2;\n    let testLastPage = page + 2;\n\n    //Testing for cases at the beginning.\n    if (page == 2) {\n      testPage = page - 1;\n      testLastPage = page + 3;\n    } else if (page == 1) {\n      testPage = page;\n      testLastPage = page + 4;\n    }\n\n    //Testing for cases at the end.\n    if (page + 1 == total_pages) {\n      testLastPage = page + 1;\n      testPage = page - 3;\n    } else if (page == total_pages) {\n      testLastPage = page;\n      testPage = page - 4;\n    }\n\n    for (let index = testPage; index <= testLastPage; index++) {\n      let pageAnchor = document.createElement('a');\n      pageAnchor.innerHTML = index;\n      if (page == index) {\n        pageAnchor.classList.add('active');\n      }\n      if (query != '') {\n        pageAnchor.addEventListener('click', () => {\n          createLinkInputMovie(index, query);\n        });\n      } else {\n        pageAnchor.addEventListener('click', () => {\n          createLinkAllMovies(index);\n        });\n      }\n      mainDiv.appendChild(pageAnchor);\n    }\n  }\n};\n\nconst createLinkAllMovies = async page => {\n  let data = await fetchFirstLoadMovies(page);\n  data.results = data.results.filter(movie => !('gender' in movie));\n  await renderMoviesFirstLoad(data.results);\n  addModalListenerFunction();\n  createPagination(data);\n};\nconst createLinkInputMovie = async (page, query) => {\n  let data = await fetchInputMovieTitle(page, query);\n  data.results = data.results.filter(movie => !('gender' in movie));\n  await renderMoviesInputTitle(data.results);\n  addModalListenerFunction();\n  createPagination(data, query);\n};\n\nexport { createPagination };\n","import {\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  inputFormButton,\n  inputFormTitle,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n} from './js/fetchData';\nimport { addModalListenerFunction } from './js/modal';\nimport { createPagination } from './js/pagination';\nimport './sass/main.scss';\n\n// Scenariusz 1: FIRST LOAD krok 3\n// Nasłuchiwanie pierwszego załadowania strony lub przeładowania\nwindow.addEventListener('load', async event => {\n  event.preventDefault();\n  try {\n    const array = await fetchFirstLoadMovies(1);\n    await renderMoviesFirstLoad(array.results);\n    addModalListenerFunction();\n    console.log(array);\n    createPagination(array);\n  } catch (error) {\n    console.error(error);\n  }\n});\n\n// Scenariusz 2: SEARCH MOVIE krok 3\n// Nasłuchiwanie zdarzenia wpisania filmu w input\ninputFormButton.addEventListener('click', async event => {\n  event.preventDefault();\n  const movieTitle = inputFormTitle.value.trim();\n  try {\n    const array = await fetchInputMovieTitle(1, movieTitle);\n    await renderMoviesInputTitle(array.results);\n    addModalListenerFunction();\n    console.log(array);\n    createPagination(array, movieTitle);\n  } catch (error) {\n    console.error(error);\n  }\n});\n"]}